/* Generated By:JavaCC: Do not edit this line. DockerParser.java */
package se.jocke.nb.docker.lexer;

import java.io.*;

public class DockerParser implements DockerParserConstants {

  final public void CompilationUnit() throws ParseException {
    expression();
  }

  final public void expression() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FROM:
      case MAINTAINER:
      case RUN:
      case CMD:
      case EXPOSE:
      case ENV:
      case ADD:
      case COPY:
      case ENTRYPOINT:
      case VOLUME:
      case USER:
      case WORKDIR:
      case ONBUILD:
        ;
        break;
      default:
        break label_1;
      }
      stmt();
      sep();
      string();
      jj_consume_token(LN);
    }
    jj_consume_token(0);
  }

  final public void stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FROM:
      jj_consume_token(FROM);
      break;
    case MAINTAINER:
      jj_consume_token(MAINTAINER);
      break;
    case RUN:
      jj_consume_token(RUN);
      break;
    case CMD:
      jj_consume_token(CMD);
      break;
    case EXPOSE:
      jj_consume_token(EXPOSE);
      break;
    case ENV:
      jj_consume_token(ENV);
      break;
    case ADD:
      jj_consume_token(ADD);
      break;
    case COPY:
      jj_consume_token(COPY);
      break;
    case ENTRYPOINT:
      jj_consume_token(ENTRYPOINT);
      break;
    case VOLUME:
      jj_consume_token(VOLUME);
      break;
    case USER:
      jj_consume_token(USER);
      break;
    case WORKDIR:
      jj_consume_token(WORKDIR);
      break;
    case ONBUILD:
      jj_consume_token(ONBUILD);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void string() throws ParseException {
    jj_consume_token(STRING);
  }

  final public void sep() throws ParseException {
    jj_consume_token(SEP);
  }

  /** Generated Token Manager. */
  public DockerParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;

  /** Constructor with InputStream. */
  public DockerParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DockerParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DockerParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor. */
  public DockerParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new DockerParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor with generated Token Manager. */
  public DockerParser(DockerParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(DockerParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

                           }
